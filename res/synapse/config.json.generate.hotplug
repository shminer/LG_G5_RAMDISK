cat << CTAG
{
	name:CPU HOTPLUG,
		elements:[
			`if [ -d "/sys/kernel/alucard_hotplug" ]; then
				$BB echo '{ SPane:{
					title:"Alucard hotplug"
				}},'
				if [ -f "/sys/kernel/alucard_hotplug/hotplug_enable" ]; then
				ALUCARDON=\`$BB cat /sys/kernel/alucard_hotplug/hotplug_enable\`;
					$BB echo '{ SCheckBox:{
						label:"Enable",
						description:"An in-kernel replacement for Qualcomm\`s MPDecision. Developed by Alucard.",
						default:'$ALUCARDON',
						action:"generic /sys/kernel/alucard_hotplug/hotplug_enable"
					}},'
				fi
				if [ -f "/sys/kernel/alucard_hotplug/hotplug_sampling_rate" ]; then
					$BB echo '{ SSeekBar:{
						title:"sampling rate",
						default:'\`$BB cat /sys/kernel/alucard_hotplug/hotplug_sampling_rate\`',
						unit:" ms",
						min:0,
						max:500,
						step:1,
						action:"generic /sys/kernel/alucard_hotplug/hotplug_sampling_rate",
					}},'
				fi
				if [ -f "/sys/kernel/alucard_hotplug/maxcoreslimit" ]; then
					$BB echo '{ SSeekBar:{
						title:"maximum cpu online",
						description:"Maximum number of CPUs that will be always online.",
						default:'\`$BB cat /sys/kernel/alucard_hotplug/maxcoreslimit\`',
						unit:" Core",
						min:1,
						max:4,
						step:1,
						action:"generic /sys/kernel/alucard_hotplug/maxcoreslimit",
								
					}},'
				fi
				if [ -f "/sys/kernel/alucard_hotplug/min_cpus_online" ]; then
					$BB echo '{ SSeekBar:{
						title:"minimum cpu online",
						description:"Minimum number of CPUs that will be always online.",
						default:'\`$BB cat /sys/kernel/alucard_hotplug/min_cpus_online\`',
						unit:" Core",
						min:1,
						max:4,
						step:1,
						action:"generic /sys/kernel/alucard_hotplug/min_cpus_online",
								
					}},'
				fi
				if [ -f "/sys/kernel/alucard_hotplug/hp_io_is_busy" ]; then
				ALUIOBUSY=\`$BB cat /sys/kernel/alucard_hotplug/hp_io_is_busy\`;
					$BB echo '{ SCheckBox:{
						label:"IO busy",

						default:'$ALUIOBUSY',
						action:"boolean /sys/kernel/alucard_hotplug/hp_io_is_busy"
					}},'
				fi
			fi`
			`[ -d "/sys/kernel/msm_mpdecision/conf" ] && BHC=/sys/kernel/msm_mpdecision/conf;
			if [ "$BHC" == "/sys/kernel/msm_mpdecision/conf" ]; then BHN="MSM MPDecision"; fi;
			if [ -d "$BHC" ]; then
				if [ -f "$BHC/enabled" ]; then
				MSMMPD=\`$BB cat $BHC/enabled\`
					$BB echo '{ SPane:{
						title:"'$BHN'"
					}},
						{ SCheckBox:{
							label:"Enable",
							description:"An in kernel replacement for Qualcomms MPDecision. Developed by show-p1984.",
							default:'$MSMMPD',
							action:"generic '$BHC'/enabled"
						}},'
				fi
				if [ -f "$BHC/min_cpus" ]; then
				MINCPU=\`$BB cat $BHC/min_cpus\`
					$BB echo '{ SSeekBar:{
							title:"Min CPUs",
							description:"Minimum CPUs online at any time.",
							min:1,
							max:'
								sh $DEVICE MaxCPU
							$BB echo ',
							step:1,
							default:'$MINCPU',
							action:"generic '$BHC'/min_cpus",
					}},'
				fi
				if [ -f "$BHC/max_cpus" ]; then
				MAXCPU=\`$BB cat $BHC/max_cpus\`
					$BB echo '{ SSeekBar:{
							title:"Max CPUs",
							description:"Maximum CPUs online at any time.",
							min:1,
							max:'
								sh $DEVICE MaxCPU
							$BB echo ',
							step:1,
							default:'$MAXCPU',
							action:"generic '$BHC'/max_cpus",
					}},'
				fi
				if [ -f "$BHC/min_cpus_online" ]; then
				MINCPU=\`$BB cat $BHC/min_cpus_online\`
					$BB echo '{ SSeekBar:{
							title:"Min CPUs",
							description:"Minimum CPUs online at any time.",
							min:1,
							max:'
								sh $DEVICE MaxCPU
							$BB echo ',
							step:1,
							default:'$MINCPU',
							action:"generic '$BHC'/min_cpus_online",
					}},'
				fi
				if [ -f "$BHC/max_cpus_online" ]; then
				MAXCPU=\`$BB cat $BHC/max_cpus_online\`
					$BB echo '{ SSeekBar:{
							title:"Max CPUs",
							description:"Maximum CPUs online at any time.",
							min:1,
							max:'
								sh $DEVICE MaxCPU
							$BB echo ',
							step:1,
							default:'$MAXCPU',
							action:"generic '$BHC'/max_cpus_online",
					}},'
				fi
				if [ -f "$BHC/idle_freq" ]; then
					$BB echo '{ SSeekBar:{
							title:"Idle Frequency",
							description:"If CPU0 is below this frequency, does not plug in CPU 1-3.",
							action:"generic '$BHC'/idle_freq",
							values:{'
								sh $DEVICE CPUFrequencyList
						$BB echo '}
					}},'
				fi
				if [ -f "$BHC/boost_enabled" ]; then
				BOOST=\`$BB cat $BHC/boost_enabled\`
					$BB echo '{ SCheckBox:{
							label:"Event Boost",
							description:"This will boost your minimum CPU speed if you touch the screen or press a button.",
							default:'$BOOST',
							action:"generic '$BHC'/boost_enabled"
						}},'
				fi
				if [ -f "$BHC/boost_time" ]; then
				BT=\`$BB cat $BHC/boost_time\`
					$BB echo '{ SSeekBar:{
							title:"Boost Time",
							description:"Time that will boost your minimum CPU speed if you touch the screen or press a button.",
							unit:" ms",
							min:0,
							max:5000,
							step:100,
							default:'$BT',
							action:"generic '$BHC'/boost_time",
					}},'
				fi
				if [ -f "$BHC/cpus_boosted" ]; then
				BOOST=\`$BB cat $BHC/cpus_boosted\`
					$BB echo '{ SSeekBar:{
						title:"Max CPUs Boosted",
						description:"Maximum number of CPUs boosted at the same time.",
						min:0,
						max:'
							sh $DEVICE MaxCPU
						$BB echo ',
						step:1,
						default:'$BOOST',
						action:"generic '$BHC'/cpus_boosted",
					}},'
				fi
				if [ -f "$BHC/boost_freqs" ]; then
					for BF in 0 1 2 3; do
						$BB echo '{ SSeekBar:{
							title:"Boost Frequency Core'$BF'",
							action:"mpdboostfreq '$BF'",
							values: {'
								sh $DEVICE CPUFrequencyList
							$BB echo '}
						}},'
					done;
				fi
				if [ -f "$BHC/startdelay" ]; then
				SD=\`$BB cat $BHC/startdelay\`
					$BB echo '{ SSeekBar:{
							title:"Start Delay",
							description:"Time until MPD starts to work.",
							min:0,
							max:50000,
							step:1000,
							default:'$SD',
							action:"generic '$BHC'/startdelay",
					}},'
				fi
				if [ -f "$BHC/delay" ]; then
				DL=\`$BB cat $BHC/delay\`
					$BB echo '{ SSeekBar:{
							title:"Delay",
							description:"Time between checks.",
							min:0,
							max:200,
							step:1,
							default:'$DL',
							action:"generic '$BHC'/delay",
					}},'
				fi
				if [ -f "$BHC/down_lock_duration" ]; then
				DOWNLOCK=\`$BB cat $BHC/down_lock_duration\`
					$BB echo '{ SSeekBar:{
							title:"down lock duration",
							description:"Time between CPU down.",
							unit:" ms",
							min:300,
							max:5000,
							step:10,
							default:'$DOWNLOCK',
							action:"generic '$BHC'/down_lock_duration"
					}},'
				fi
				if [ -f "$BHC/pause" ]; then
				PAUSE=\`$BB cat $BHC/pause\`
					$BB echo '{ SSeekBar:{
							title:"Pause",
							description:"If something else plugs in the CPU, fall asleep for this amount of time.",
							unit:" ms",
							min:0,
							max:50000,
							step:1000,
							default:'$PAUSE',
							action:"generic '$BHC'/pause",
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_0" ]; then
				NWNS0=\`$BB cat $BHC/nwns_threshold_0\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Hotplug CPU1",
							description:"If this threshold is reached, CPU1 will be hotplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS0',
							action:"generic '$BHC'/nwns_threshold_0"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_1" ]; then
				NWNS1=\`$BB cat $BHC/nwns_threshold_1\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Unplug CPU0",
							description:"If this threshold is reached, CPU0 will be unplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS1',
							action:"generic '$BHC'/nwns_threshold_1"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_2" ]; then
				NWNS2=\`$BB cat $BHC/nwns_threshold_2\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Hotplug CPU2",
							description:"If this threshold is reached, CPU2 will be hotplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS2',
							action:"generic '$BHC'/nwns_threshold_2"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_3" ]; then
				NWNS3=\`$BB cat $BHC/nwns_threshold_3\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Unplug CPU1",
							description:"If this threshold is reached, CPU1 will be unplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS3',
							action:"generic '$BHC'/nwns_threshold_3"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_4" ]; then
				NWNS4=\`$BB cat $BHC/nwns_threshold_4\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Hotplug CPU3",
							description:"If this threshold is reached, CPU3 will be hotplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS4',
							action:"generic '$BHC'/nwns_threshold_4"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_5" ]; then
				NWNS5=\`$BB cat $BHC/nwns_threshold_5\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Unplug CPU2",
							description:"If this threshold is reached, CPU2 will be unplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS5',
							action:"generic '$BHC'/nwns_threshold_5"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_6" ]; then
				NWNS6=\`$BB cat $BHC/nwns_threshold_6\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Hotplug CPU4",
							description:"If this threshold is reached, CPU4 will be hotplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS6',
							action:"generic '$BHC'/nwns_threshold_6"
					}},'
				fi
				if [ -f "$BHC/nwns_threshold_7" ]; then
				NWNS7=\`$BB cat $BHC/nwns_threshold_7\`
					$BB echo '{ SSeekBar:{
							title:"Runqueue Threshold Unplug CPU3",
							description:"If this threshold is reached, CPU3 will be unplugged.",
							min:0,
							max:100,
							step:1,
							default:'$NWNS7',
							action:"generic '$BHC'/nwns_threshold_7"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_0" ]; then
				TWTS0=\`$BB cat $BHC/twts_threshold_0\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Hotplug CPU1",
							description:"This amount of time must have passed for CPU1 to be hotplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS0',
							action:"generic '$BHC'/twts_threshold_0"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_1" ]; then
				TWTS1=\`$BB cat $BHC/twts_threshold_1\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Unplug CPU0",
							description:"This amount of time must have passed for CPU0 to be unplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS1',
							action:"generic '$BHC'/twts_threshold_1"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_2" ]; then
				TWTS2=\`$BB cat $BHC/twts_threshold_2\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Hotplug CPU2",
							description:"This amount of time must have passed for CPU2 to be hotplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS2',
							action:"generic '$BHC'/twts_threshold_2"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_3" ]; then
				TWTS3=\`$BB cat $BHC/twts_threshold_3\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Unplug CPU1",
							description:"This amount of time must have passed for CPU1 to be unplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS3',
							action:"generic '$BHC'/twts_threshold_3"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_4" ]; then
				TWTS4=\`$BB cat $BHC/twts_threshold_4\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Hotplug CPU3",
							description:"This amount of time must have passed for CPU3 to be hotplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS4',
							action:"generic '$BHC'/twts_threshold_4"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_5" ]; then
				TWTS5=\`$BB cat $BHC/twts_threshold_5\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Unplug CPU2",
							description:"This amount of time must have passed for CPU2 to be unplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS5',
							action:"generic '$BHC'/twts_threshold_5"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_6" ]; then
				TWTS6=\`$BB cat $BHC/twts_threshold_6\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Hotplug CPU4",
							description:"This amount of time must have passed for CPU4 to be hotplugged.",
							unit:" ms",
							min:0,
							max:500,
							step:1,
							default:'$TWTS6',
							action:"generic '$BHC'/twts_threshold_6"
					}},'
				fi
				if [ -f "$BHC/twts_threshold_7" ]; then
				TWTS7=\`$BB cat $BHC/twts_threshold_7\`
					$BB echo '{ SSeekBar:{
							title:"Time Threshold Unplug CPU3",
							description:"This amount of time must have passed for CPU3 to be unplugged.",
							unit:" ms",
							min:0,
							max:1000,
							step:1,
							default:'$TWTS7',
							action:"generic '$BHC'/twts_threshold_7"
					}},'
				fi
			fi`
		]
}
CTAG
